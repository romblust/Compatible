local componentGen = loadstring(game:HttpGet("https://raw.githubusercontent.com/romblust/Compatible/main/Component3D"))()
local D = loadstring(game:HttpGet("https://raw.githubusercontent.com/romblust/Compatible/main/Definition"))()
local guiService = game:GetService('GuiService')

local screenGen: D.screenGen = {} :: D.screenGen
screenGen.Index = screenGen

function screenGen.new(screenGui: ScreenGui, displayDistance: number): D.screenGen
	local partIndex: {[GuiObject]: D.component3D} = {}

	local self = setmetatable({
		partIndex = partIndex,
		rootGui = screenGui,
		displayDistance = displayDistance,
		rootOffset = CFrame.new()
	}, screenGen)

	for Index: number, Component2D: GuiObject in pairs(screenGui:GetDescendants()) do
		if Component2D:IsA("GuiObject") then
			partIndex[Component2D] = componentGen.new(Component2D, self)
		end
	end

	screenGui.DescendantAdded:Connect(function(AddedComponent: Instance)
		local AddedComponent = AddedComponent :: GuiObject
		if partIndex[AddedComponent] then return end

		if AddedComponent:IsA("GuiObject") then
			partIndex[AddedComponent] = componentGen.new(AddedComponent, self)
		end

		for Index: number, Component2D: GuiObject in pairs(AddedComponent:GetDescendants()) do
			if Component2D:IsA("GuiObject") and not partIndex[Component2D] then
				partIndex[Component2D] = componentGen.new(Component2D, self)
			end
		end
	end)

	return self
end

function screenGen:GetRealCanvasSize(): Vector2
	return workspace.CurrentCamera.ViewportSize
end

function screenGen:GetInset(): Vector2
	return guiService:GetGuiInset()
end

function screenGen:GetInsetCanvasSize(): Vector2
	return self:GetRealCanvasSize() - self:GetInset()
end

function screenGen:GetIntendedCanvasSize(): Vector2
	if self.rootGui.IgnoreGuiInset then
		return self:GetRealCanvasSize()
	end
	return self:GetInsetCanvasSize()
end

function screenGen:GetComponent3D(Component2D: GuiObject): D.component3D?
	return self.partIndex[Component2D]
end

return screenGen
